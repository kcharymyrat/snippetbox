package main

import (
	"fmt"
	"log"
	"net/http"
	"strconv"
)

// same as home_view(request) - handler (controller)
func home(w http.ResponseWriter, r *http.Request) {
	if r.URL.Path != "/" {
		http.NotFound(w, r)
		return
	}
	w.Write([]byte("Hello, from Snippetbox"))
}

func snippetView(w http.ResponseWriter, r *http.Request) {
	idStr := r.URL.Query().Get("id")
	fmt.Println("idStr =", idStr)
	id, err := strconv.Atoi(r.URL.Query().Get("id"))
	if err != nil || id < 1 {
		http.NotFound(w, r)
		return
	}
	fmt.Println(r, &r)
	// w.Write([]byte("Display a specific snippet..."))
	fmt.Fprintf(w, "Display a specific snippet with %d...", id)
}

func snippertCreate(w http.ResponseWriter, r *http.Request) {
	if r.Method != "POST" {
		w.Header().Set("Allow", http.MethodPost)
		http.Error(w, "Method NOT Allowed", http.StatusMethodNotAllowed)
		return
	}

	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)
	w.Write([]byte(`{"name": "Alex"}`))
}

func main() {
	// Create a servemux (router) - as in url_patterns I guess ??
	// stores a mapping between the URL patterns for your application and the corresponding handlers
	mux := http.NewServeMux()

	// same as url paths (views)
	mux.HandleFunc("/", home)
	mux.HandleFunc("/snippet/view", snippetView)
	mux.HandleFunc("/snippet/create", snippertCreate)

	// Starting a server, and listening
	log.Println("Starting server on :4000")
	err := http.ListenAndServe(":4000", mux)
	log.Fatal(err)
}
